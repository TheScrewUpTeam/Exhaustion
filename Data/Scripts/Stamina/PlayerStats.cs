using Sandbox.Game;
//using Sandbox.ModAPI;
using System;
using System.Collections.Generic;
using VRage.Game;
using VRage.Game.ModAPI;
using VRage.Utils;

namespace Keyspace.Stamina
{
    public class PlayerStats
    {
        private static MyStringHash fatigueDamage = MyStringHash.GetOrCompute("Fatigue");
        private static readonly float gravityConstant = 9.81f * MyPerGameSettings.CharacterGravityMultiplier;

        private MyCharacterMovementEnum prevMovementState = MyCharacterMovementEnum.Standing;
        
        public float Stamina { get; set; }

        public PlayerStats(float stamina)
        {
            Stamina = stamina;
        }

        public PlayerStats()
        {
            Stamina = 1.0f;
        }

        public void Recalculate(IMyPlayer player)
        {
            MyCharacterMovementEnum currMovementState = player.Character.CurrentMovementState;

            float staminaDelta;
            if (prevMovementState != MyCharacterMovementEnum.Jump)
            {
                staminaDelta = MovementCosts.Map[currMovementState];
            }
            else
            {
                // Character falls soon after jumping; dupe cost on first recalc after that
                // so the stamina change doesn't look too inconsistent from jump to jump.
                staminaDelta = MovementCosts.Map[MyCharacterMovementEnum.Jump];
            }

            // DEBUG
            //var msg = $"{currMovementState} {prevMovementState} {player.Character.Integrity}";
            //MyLog.Default.WriteLineAndConsole(msg);
            //MyAPIGateway.Utilities.ShowNotification(msg, 1000);

            float gravityInfluence;
            if (staminaDelta < 0.0f)
            {
                // MAGICNUM 0.1f: arbitrary non-negative to limit bonus in low-gravity (TODO: configurable!).
                gravityInfluence = Math.Max(0.1f, player.Character.Physics.Gravity.Length() / gravityConstant);
            }
            else
            {
                // MAGICNUM 1.0f: for simplicity, stamina recovery doesn't get affected by gravity.
                gravityInfluence = 1.0f;
            }

            Stamina += staminaDelta * gravityInfluence;

            // Apply negative stamina as damage, with some scaling.
            if (Stamina < 0.0f)
            {
                // MAGICNUM -10.0f: chosen arbitrarily (TODO: configurable!).
                player.Character.DoDamage(Stamina * -10.0f, fatigueDamage, true);
            }

            // Clamp stamina between -100% (unattainable enough) and current health.
            Stamina = Math.Max(-1.0f, Math.Min(Stamina, player.Character.Integrity / 100.0f));

            // Update for next time.
            prevMovementState = currMovementState;
        }
    }

    public static class MovementCosts
    {
        private static float gainHigh;
        private static float gainMed;
        private static float gainLow;
        private static float costNone;
        private static float costLow;
        private static float costMed;
        private static float costHigh;

        // helpers
        private static float walk;
        private static float crouchWalk;
        private static float run;

        internal static void SetFromConfig(Config config)
        {
            gainHigh = config.GainHigh;
            gainMed  = config.GainMedium;
            gainLow  = config.GainLow;
            costNone = config.CostNone;
            costLow  = config.CostLow;
            costMed  = config.CostMedium;
            costHigh = config.CostHigh;

            walk       = gainLow;
            crouchWalk = costLow;
            run        = costLow;
        }

        internal static readonly Dictionary<MyCharacterMovementEnum, float> Map
            = new Dictionary<MyCharacterMovementEnum, float>
            {
                // Enum values generated by MSVS2019 drom:
                // Assembly VRage.Game, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
                // C:\Program Files (x86)\Steam\steamapps\common\SpaceEngineers\Bin64\VRage.Game.dll
                { MyCharacterMovementEnum.Standing,                gainMed    },
                { MyCharacterMovementEnum.Sitting,                 gainHigh   },
                { MyCharacterMovementEnum.Crouching,               gainHigh   },
                { MyCharacterMovementEnum.Flying,                  costNone   },
                { MyCharacterMovementEnum.Falling,                 gainMed    },
                { MyCharacterMovementEnum.Jump,                    costHigh   },
                { MyCharacterMovementEnum.Died,                    costNone   },
                { MyCharacterMovementEnum.Ladder,                  gainLow    },
                { MyCharacterMovementEnum.Walking,                 walk       },
                { MyCharacterMovementEnum.CrouchWalking,           crouchWalk },
                { MyCharacterMovementEnum.BackWalking,             walk       },
                { MyCharacterMovementEnum.CrouchBackWalking,       crouchWalk },
                { MyCharacterMovementEnum.WalkStrafingLeft,        walk       },
                { MyCharacterMovementEnum.CrouchStrafingLeft,      crouchWalk },
                { MyCharacterMovementEnum.WalkingLeftFront,        walk       },
                { MyCharacterMovementEnum.CrouchWalkingLeftFront,  crouchWalk },
                { MyCharacterMovementEnum.WalkingLeftBack,         walk       },
                { MyCharacterMovementEnum.CrouchWalkingLeftBack,   crouchWalk },
                { MyCharacterMovementEnum.WalkStrafingRight,       walk       },
                { MyCharacterMovementEnum.CrouchStrafingRight,     crouchWalk },
                { MyCharacterMovementEnum.WalkingRightFront,       walk       },
                { MyCharacterMovementEnum.CrouchWalkingRightFront, crouchWalk },
                { MyCharacterMovementEnum.WalkingRightBack,        walk       },
                { MyCharacterMovementEnum.CrouchWalkingRightBack,  crouchWalk },
                { MyCharacterMovementEnum.LadderUp,                costLow    },
                { MyCharacterMovementEnum.LadderDown,              costLow    },
                { MyCharacterMovementEnum.Running,                 run        },
                { MyCharacterMovementEnum.Backrunning,             run        },
                { MyCharacterMovementEnum.RunStrafingLeft,         run        },
                { MyCharacterMovementEnum.RunningLeftFront,        run        },
                { MyCharacterMovementEnum.RunningLeftBack,         run        },
                { MyCharacterMovementEnum.RunStrafingRight,        run        },
                { MyCharacterMovementEnum.RunningRightFront,       run        },
                { MyCharacterMovementEnum.RunningRightBack,        run        },
                { MyCharacterMovementEnum.Sprinting,               costMed    },
                { MyCharacterMovementEnum.RotatingLeft,            costNone   },
                { MyCharacterMovementEnum.CrouchRotatingLeft,      costLow    },
                { MyCharacterMovementEnum.RotatingRight,           costNone   },
                { MyCharacterMovementEnum.CrouchRotatingRight,     costLow    },
                { MyCharacterMovementEnum.LadderOut,               costNone   }
            };
    }
}
